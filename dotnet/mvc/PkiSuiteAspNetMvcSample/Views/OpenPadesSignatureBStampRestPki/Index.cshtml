@using PkiSuiteAspNetMvcSample.Controllers
@using PkiSuiteAspNetMvcSample.Models.RestPki
@using Lacuna.RestPki.Client
@model OpenPadesSignatureBStampModel

<h3>Open existing PAdES Signature with B-Stamp&trade;</h3>

@if (Model.Signature.BStamp == null) {

	<h4>The given signature has not been registered on a Blockchain</h4>
	<h6>Tip: signatures performed with Rest PKI are registered on the Bitcoin Blockchain overnight. Try again tomorrow with this same file.</h6>
	<br/>

} else {

	<h4>The given signature has a B-Stamp&trade;</h4>

	<p>
		Este relatório contém as informações necessárias para que seja realizada uma auditoria da validade das
		assinaturas digitais presentes no documento cujos resumos criptográficos ("hashes") encontram-se abaixo:
	</p>

	<ul>
		@foreach (var digest in Model.Signature.BStamp.DocumentDigests) {
			<li>@digest.Algorithm.Name: @digest.HexValue</li>
		}
	</ul>

	<p>
		Os hashes do documento assinado e dos artefatos de validação encontram-se incluídos no índice de hashes
		(<a href="/Download/File/@ViewBag.BStampIndexFile" target="_blank">Hashes.txt</a>), que acompanha este relatório.
		Os hashes desse índice são:
	</p>

	<ul>
		@foreach (var digest in Model.Signature.BStamp.IndexDigests) {
			<li>@digest.Algorithm.Name: <b>@digest.HexValue</b></li>
		}
	</ul>

	<p>
		O índice de hashes encontra-se registrado no Blockchain do @Model.Signature.BStamp.Blockchain na seguinte transação:
	</p>

	<ul>
		<li>Blockchain: <b>@Model.Signature.BStamp.Blockchain</b></li>
		<li>Transaction: <b><a href="https://blockchain.info/tx/@Model.Signature.BStamp.TransactionId?show_adv=true" target="_blank">@Model.Signature.BStamp.TransactionId</a></b></li>
		<li>Block number: <b>@Model.Signature.BStamp.BlockNumber</b></li>
		<li>Block date: <b>@Model.Signature.BStamp.BlockDate.UtcDateTime.ToString("G")</b> (@Model.Signature.BStamp.BlockDate.LocalDateTime.ToString("G") no horário local)</li>
	</ul>

	<p>
		A transação pode ser verificada utilizando qualquer serviço online de verificação de Blockchain, por exemplo:
	</p>

	<ul>
		<li><a href="https://blockchain.info/tx/@Model.Signature.BStamp.TransactionId?show_adv=true" target="_blank">https://blockchain.info/tx/@Model.Signature.BStamp.TransactionId</a></li>
		<li><a href="https://blocktrail.com/BTC/tx/@Model.Signature.BStamp.TransactionId" target="_blank">https://blocktrail.com/BTC/tx/@Model.Signature.BStamp.TransactionId</a></li>
	</ul>

	<p>
		Acessando qualquer um dos links acima é possível conferir os hashes do índice de hashes nos detalhes da
		transação. Portanto, a existência na data indicada acima do referido índice de hashes, e por consequência do
		documento assinado e de todos os artefatos de validação, encontra-se registrada de maneira inviolável no
		blockchain do @Model.Signature.BStamp.Blockchain, estrutura de dados difundida e perpetuada globalmente pelos
		nós da rede da criptomoeda.
	</p>

	<p>
		Portanto, as validações a seguir foram feitas assumindo que o documento assinado e os artefatos de
		validação comprovadamente existiam em <b>@Model.Signature.BStamp.BlockDate.UtcDateTime.ToString("G") UTC</b> (@Model.Signature.BStamp.BlockDate.LocalDateTime.ToString("G") no horário local).
	</p>

}

@if (Model.AuditPackageFile != null) {
	<p><a href="/Download/File/@Model.AuditPackageFile" class="btn btn-primary">Baixar Pacote para Auditoria</a></p>
}

<h5>The given file contains @Model.Signature.Signers.Count signatures:</h5>

<div id="accordion">

	@for (var i = 0; i < Model.Signature.Signers.Count; i++) {

		var signer = Model.Signature.Signers[i];
		var collapseId = string.Format("signer_{0}_collapse", i);
		var headingId = string.Format("signer_{0}_heading", i);

		<div class="card">
			<div class="card-header open-header" id="@headingId">
				<a class="collapsed" role="button" data-toggle="collapse" href="#@collapseId" aria-expanded="true" aria-controls="@collapseId">@signer.Certificate.SubjectName.CommonName</a>
				@if (signer.ValidationResults != null) {
					<span> </span>
					if (signer.ValidationResults.IsValid) {
						<span class="badge badge-success">valid</span>
					}
					else {
						<span class="badge badge-danger">invalid</span>
					}
				}
			</div>
			<div id="@collapseId" class="collapse" role="tabpanel" aria-labelledby="@headingId" data-parent="#accordion">
				<div class="card-body">
					@if (signer.SigningTime != null) {
						<p>Signing time: @TimeZoneInfo.ConvertTime(signer.SigningTime.Value, PrinterFriendlyPadesRestPkiController.TimeZone).ToString(PrinterFriendlyPadesRestPkiController.DateFormat, PrinterFriendlyPadesRestPkiController.CultureInfo) (@PrinterFriendlyPadesRestPkiController.TimeZoneDisplayName)</p>
					}
					<p>Message digest: @signer.MessageDigest.Algorithm.Name @BitConverter.ToString(signer.MessageDigest.Value) </p>
					@if (signer.SignaturePolicy != null) {
						<p>Signature policy: @signer.SignaturePolicy.Oid</p>
					}
					<p>
						Signer information:
						<ul>
							<li>Subject: @signer.Certificate.SubjectName.CommonName</li>
							<li>Email: @signer.Certificate.EmailAddress</li>
							<li>
								ICP-Brasil fields
								<ul>
									<li>Tipo de certificado: @signer.Certificate.PkiBrazil.CertificateType</li>
									<li>CPF: @signer.Certificate.PkiBrazil.Cpf</li>
									<li>Responsavel: @signer.Certificate.PkiBrazil.Responsavel</li>
									<li>Empresa: @signer.Certificate.PkiBrazil.CompanyName</li>
									<li>CNPJ: @signer.Certificate.PkiBrazil.Cnpj</li>
									<li>RG: @signer.Certificate.PkiBrazil.RGNumero @signer.Certificate.PkiBrazil.RGEmissor @signer.Certificate.PkiBrazil.RGEmissorUF</li>
									<li>OAB: @signer.Certificate.PkiBrazil.OabNumero @signer.Certificate.PkiBrazil.OabUF</li>
								</ul>
							</li>
						</ul>
					</p>
					@if (signer.ValidationResults != null) {
						<p>
							Validation results:<br />
							<textarea style="width: 100%" rows="20">@signer.ValidationResults.ToString()</textarea>
						</p>
					}
				</div>
			</div>
		</div>
	}
</div>
