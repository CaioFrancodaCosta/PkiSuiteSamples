/**
 * This file will start the Express.js server. Adding friendly error messages
 * handlers.
 */
const fs = require('fs');
const debug = require('debug')('amplia-sample:server');

const app = require('../app');
const { Config } = require('../config');

// Get port from environment and store in Express.
let port = normalizePort(Config.getInstance().get('port'));
app.set('port', port);

// Create server.
let server;
if (Config.getInstance().get('protocol') === 'https') {
	const https = require('https');

	const sslConfig = Config.getInstance().get('ssl');
	server = https.createServer({
		key: fs.readFileSync(sslConfig['key']),
		cert: fs.readFileSync(sslConfig['cert'])
	});
} else {
	const http = require('http');
	server = http.createServer(app);
}

// Listen on provided port, on all network interfaces.
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalizes a port into a number, string, or false.
 */
function normalizePort(val) {
	let port = parseInt(val, 10);

	if (isNaN(port)) {
		// Named pipe.
		return val;
	}

	if (port >= 0) {
		// Port number.
		return port;
	}

	return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
	if (error.syscall !== 'listen') {
		throw error;
	}

	let bind = (typeof port === 'string') ? `Pipe ${port}` : `Port ${port}`;

	// Handle specific listen errors with friendly messages.
	switch (error.code) {
		case 'EACCES':
			console.error(`${bind} requires elevated privileges`);
			process.exit(1);
			break;
		case 'EADDRINUSE':
			console.error(`${bind} is already in use`);
			process.exit(1);
			break;
		default:
			throw error;
	}
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
	let addr = server.address();
	let bind = (typeof addr === 'string') ? `pipe ${addr}` : `port ${addr.port}`;
	debug(`Listening on ${bind}`);
}
