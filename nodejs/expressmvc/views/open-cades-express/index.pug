//- TODO: Uncomment when PKI Express supports cades validation
//- extends ../layout

//- block content

//-    h2(class='ls-title') Open existing CAdES Signature with PKI Express
   
//-    h5(class="ls-subtitle") Signature information

//-    p This signature has an encapsulated file? #{signature.hasEncapsulatedContent? "Yes":"No"}
//-    if (signature.hasEncapsulatedContent)
//-       a(class="btn btn-primary mb-3" href=`/download?fileId=${outputFile}`) Download encapsulated file as PDF

//-    p The given file contains #{signature.signers.length} signatures:
//-       div(class="ls-content")
//-          div(id="accordion")
//-             each signer, index in signature.signers
//-                - let collapseId = "signer_"+index+"_collapse"
//-                - let headingId = "signer_"+index+"_heading"

//-                div(class="card")
//-                   div(class="card-header open-header" id=headingId)
//-                      <a class="collapsed" role="button" data-toggle="collapse" href="##{collapseId}" aria-expanded="true" aria-controls=#{collapseId}> #{signer.certificate.subjectName.commonName} </a>

//-                      if signer.validationResults
//-                         span
//-                         if signer.validationResults.isValid()
//-                            span(class="badge badge-success") valid
//-                         else
//-                            span(class="badge badge-danger") invalid

//-                   div(id=collapseId class="collapse" role="tabpanel" aria-labelledby=headingId data-parent="#accordion")
//-                      div(class="card-body")
//-                         if signer.signingTime
//-                            //- Date format when converting date into a string using moment library, passed throw the
//-                            //- middleware (see https://momentjs.com/docs/#/displaying/format for other date formats).
//-                            - var dateFormat = 'DD/MM/YYYY HH:mm';
//-                            p Signing time: #{moment(signer.signingTime).format(dateFormat)}
//-                         p 
//-                         | Message digest: #{signer.messageDigest.algorithm.name} #{signer.messageDigest.hexValue.toUpperCase()}
//-                         if signer.signaturePolicy
//-                            p
//-                            | Signature policy: #{signer.signaturePolicy.oid}
//-                         p
//-                            | Signer information:
//-                            ul
//-                               li Subject: #{signer.certificate.subjectName.commonName}
//-                               li Email: #{signer.certificate.emailAddress}
//-                               li ICP-Brasil fields
//-                                  ul
//-                                     li Tipo de certificado: #{signer.certificate.pkiBrazil.certificateType}
//-                                     li CPF: #{signer.certificate.pkiBrazil.cpfFormatted}
//-                         if signer.validationResults
//-                            label(for="validations") Validation results
//-                            textarea(id="validations" style="width: 100%;" rows="20") #{signer.validationResults}